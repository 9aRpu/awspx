#!/bin/bash

# By default awspx is only accessible at http://localhost 

WEBPORT=${WEBPORT:-80}
HOST=${HOST:-127.0.0.1}

realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

function install(){

    BASE="neo4j:3.5.13"
    DEPS=("docker" "rsync")

    SOURCE="$(dirname $(realpath $0))"

    APT_DEPS=("nodejs" "npm" "python3-pip" "procps" "git")
    PY_DEPS=("argparse" "awscli-local" "boto3" "neo4j"
             "configparser" "git-python") 

    # Ensure dependencies are met 
    for dep in ${DEPS[*]}; do
        if [ -z "$(which ${dep} 2>/dev/null)" ]; then
            echo "[-] awspx requires \"$(basename ${dep})\" to function."
            echo "    Ensure it has been installed before running this script."
            exit 2 
        fi
    done

    # Delete all containers named awspx (prompt for confirmation)
    uid=($(docker ps -a -f name=awspx -q))
    if [ -n "${uid}" ]; then 
        echo "[!] An existing container named \"awspx\" was detected"
        echo "    In order to continue, it must be deleted. All data will be lost." 
        read -p "    Continue [y/n]? " response
        [[ "${response}" == "Y" || "${response}" == "y" ]] || exit
        docker stop awspx >/dev/null 2>&1
        docker rm awspx >/dev/null 2>&1
    fi 

    # Update 
    mkdir -p $MOUNT/data
    rsync -avrt $SOURCE/ ${MOUNT}/. >/dev/null
    rsync -avrt $0 /usr/local/bin/awspx >/dev/null
    echo "" 
    set -e 

    # Create awspx container 
    docker pull $BASE
    docker run -itd \
        --name awspx \
        --hostname=awspx \
        -p ${HOST}:${WEBPORT}:80 \
        -p ${HOST}:7687:7687 \
        -p ${HOST}:7373:7373 \
        -p ${HOST}:7474:7474 \
        -v ${MOUNT}:/opt/awspx \
        --restart=always $BASE

    # Modify entrypoint
    HEADER=(
        '#NEO4J_dbms_memory_heap_initial__size="2048m"'
        '#NEO4J_dbms_memory_heap_max__size="2048m"'
        '#NEO4J_dbms_memory_pagecache__size="2048m"'
        "export HOST_MOUNT_DIR='${MOUNT}'"
        'if [[ "${1}" == "neo4j" ]] && [[ -z "${2:-}" ]] &&  [[ -z "$(pgrep java)" ]]; then'
        '[[ -z "$(pgrep npm)" ]] && cd /opt/awspx/www && nohup npm run serve>/dev/null 2>&1 &'
        '/docker-entrypoint.sh neo4j init &'
        'bash'
        'exit'
        'fi'
        )
    
    for i in `seq $((${#HEADER[@]} -1)) -1 0`; do
        docker exec -it awspx sed -i "4i${HEADER[$i]}" /docker-entrypoint.sh
    done

    # Install dependencies
    docker exec -it awspx \
        apt -y update 
    docker exec -it awspx \
        apt install -y ${APT_DEPS[@]}
    docker exec -it awspx \
        pip3 install --upgrade ${PY_DEPS[@]}

    # Set neo4j user:pass to neo4j:neo4j
    docker exec -it awspx \
        rm -f -- /var/lib/neo4j/data/dbms/auth
    docker exec -it awspx \
        neo4j-admin set-initial-password neo4j 

    # Update neo4j HOST 
    docker exec -it awspx \
        sed -i "s/const hostname = .*/const hostname = \"${HOST}\"/g" /opt/awspx/www/src/neo4j.js   

    # Install npm packages (sometimes it fails the first time)
    while :; do
        docker exec -it awspx \
            sh -c "cd /opt/awspx/www && npm install"
        [[ $? -eq 0 ]] && break
    done 

    docker restart awspx >/dev/null 

    set +e

    CLI="/usr/local/bin/awspx"
    if !(which awspx >/dev/null 2>&1) ; then 
        read -p "[*] '/usr/local/bin' isn't in your \$PATH. Choose another location [y/n]? " response
        if [[ "${response}" == "Y" || "${response}" == "y" ]]; then
            select p in $(echo "${PATH}" | tr ':' '\n' | sort); do
                case $p in
                    /*)
                        ln -s /usr/local/bin/awspx $p/awspx >/dev/null 2>&1
                        CLI="awspx"
                        break
                    ;;
                    *) ;;
                esac
            done          
        fi
    else
        CLI="awspx"
    fi

    echo -e "\n\n... and you're all set!\n"

    echo -e "- Run: \`${CLI} -h\` for a list of options."
    echo -e "- The web interface (http://${HOST}:${WEBPORT}) will be available shortly..."
    echo -e "- For additional information, see https://github.com/FSecureLABS/awspx/wiki.\n"

    echo -e "[+] Done"

    }

function awspx(){
    docker exec -it \
           -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
           -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
           -e AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN \
           -e AWS_SECURITY_TOKEN=$AWS_SECURITY_TOKEN \
           awspx /opt/awspx/cli.py $@
    }

if [ "$(uname)" == "Darwin" ]; then
    MOUNT="${HOME}/bin/awspx"

# Linux
elif [[ "$(uname)" =~ "Linux" ]]; then 
    MOUNT="/opt/awspx"
    if [[ "$(whoami)" != "root" ]]; then 
        echo "[-] awspx must be run with root privileges."
        exit 1
    fi
else 
    echo "[-] Platform: '$(uname)' is not supported"
    exit 1
fi

DOCKER_RUNNING="$(docker info >/dev/null 2>&1)"

if [ "${?}" -ne 0 ]; then 
    echo "[-] \"docker\" must first be started." 
    exit 1 
fi 

case "$(basename $0)" in
    awspx) awspx $@;;
    *) install;;
esac
